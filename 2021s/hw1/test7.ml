(* Exercise 7. eval *)
open Ex7
open Testlib

module TestEx7: TestEx =
  struct
    type testcase =
      (* expr, string of expr, answer*)
      | EVAL of expr * string * int

    let testcases = 
      (* generated by https://gist.github.com/Leeingnyo/443097fec08f828fbc70911cd5f1cf22 *)
      [ EVAL (DIVIDE (NUM (39), NUM (-17)), "DIVIDE (NUM (39), NUM (-17))", -2)
      ; EVAL (MULT (NUM (-10), NUM (-46)), "MULT (NUM (-10), NUM (-46))", 460)
      ; EVAL (MULT (NUM (42), NUM (1)), "MULT (NUM (42), NUM (1))", 42)
      ; EVAL (MINUS (NUM (-5), NUM (-46)), "MINUS (NUM (-5), NUM (-46))", 41)
      ; EVAL (MINUS (NUM (25), NUM (-42)), "MINUS (NUM (25), NUM (-42))", 67)
      ; EVAL (PLUS (NUM (-21), NUM (-29)), "PLUS (NUM (-21), NUM (-29))", -50)
      ; EVAL (MAX [], "MAX []", 0)
      ; EVAL (MULT (NUM (-26), NUM (41)), "MULT (NUM (-26), NUM (41))", -1066)
      ; EVAL (DIVIDE (NUM (5), NUM (-2)), "DIVIDE (NUM (5), NUM (-2))", -2)
      ; EVAL (MULT (NUM (0), NUM (24)), "MULT (NUM (0), NUM (24))", 0)
      ; EVAL (DIVIDE (NUM (-30), NUM (-40)), "DIVIDE (NUM (-30), NUM (-40))", 0)
      ; EVAL (PLUS (NUM (18), NUM (-30)), "PLUS (NUM (18), NUM (-30))", -12)
      ; EVAL (DIVIDE (NUM (-19), NUM (32)), "DIVIDE (NUM (-19), NUM (32))", 0)
      ; EVAL (NUM (2), "NUM (2)", 2)
      ; EVAL (PLUS (NUM (28), NUM (5)), "PLUS (NUM (28), NUM (5))", 33)
      ; EVAL (DIVIDE (NUM (-35), NUM (18)), "DIVIDE (NUM (-35), NUM (18))", -1)
      ; EVAL (MAX [NUM (10); NUM (14)], "MAX [NUM (10); NUM (14)]", 14)
      ; EVAL (MAX [], "MAX []", 0)
      ; EVAL (PLUS (NUM (19), NUM (7)), "PLUS (NUM (19), NUM (7))", 26)
      ; EVAL (DIVIDE (NUM (-24), NUM (-18)), "DIVIDE (NUM (-24), NUM (-18))", 1)
      ; EVAL (MAX [], "MAX []", 0)
      ; EVAL (PLUS (DIVIDE (NUM (7), NUM (-6)), MULT (PLUS (NUM (3), NUM (-37)), NUM (-19))), "PLUS (DIVIDE (NUM (7), NUM (-6)), MULT (PLUS (NUM (3), NUM (-37)), NUM (-19)))", 645)
      ; EVAL (MINUS (MINUS (MULT (NUM (-5), NUM (1)), DIVIDE (NUM (29), NUM (39))), DIVIDE (DIVIDE (NUM (23), NUM (-37)), NUM (26))), "MINUS (MINUS (MULT (NUM (-5), NUM (1)), DIVIDE (NUM (29), NUM (39))), DIVIDE (DIVIDE (NUM (23), NUM (-37)), NUM (26)))", -5)
      ; EVAL (PLUS (NUM (-17), MINUS (MINUS (NUM (6), NUM (-27)), PLUS (NUM (-39), NUM (-14)))), "PLUS (NUM (-17), MINUS (MINUS (NUM (6), NUM (-27)), PLUS (NUM (-39), NUM (-14))))", 69)
      ; EVAL (MULT (PLUS (MINUS (NUM (46), NUM (-27)), PLUS (NUM (8), NUM (-43))), MAX [MINUS (NUM (-33), NUM (14)); PLUS (NUM (0), NUM (34)); NUM (33); MINUS (NUM (1), NUM (-48))]), "MULT (PLUS (MINUS (NUM (46), NUM (-27)), PLUS (NUM (8), NUM (-43))), MAX [MINUS (NUM (-33), NUM (14)); PLUS (NUM (0), NUM (34)); NUM (33); MINUS (NUM (1), NUM (-48))])", 1862)
      ; EVAL (PLUS (NUM (-29), DIVIDE (PLUS (NUM (12), NUM (9)), NUM (40))), "PLUS (NUM (-29), DIVIDE (PLUS (NUM (12), NUM (9)), NUM (40)))", -29)
      ; EVAL (NUM (49), "NUM (49)", 49)
      ; EVAL (DIVIDE (MAX [], MINUS (NUM (-40), MINUS (NUM (5), NUM (13)))), "DIVIDE (MAX [], MINUS (NUM (-40), MINUS (NUM (5), NUM (13))))", 0)
      ; EVAL (MULT (PLUS (NUM (37), PLUS (NUM (6), NUM (-22))), MULT (NUM (-2), DIVIDE (NUM (-34), NUM (45)))), "MULT (PLUS (NUM (37), PLUS (NUM (6), NUM (-22))), MULT (NUM (-2), DIVIDE (NUM (-34), NUM (45))))", 0)
      ; EVAL (NUM (25), "NUM (25)", 25)
      ; EVAL (MULT (MAX [], PLUS (MINUS (MULT (MAX [NUM (29); NUM (17); NUM (-16)], NUM (31)), NUM (-23)), NUM (5))), "MULT (MAX [], PLUS (MINUS (MULT (MAX [NUM (29); NUM (17); NUM (-16)], NUM (31)), NUM (-23)), NUM (5)))", 0)
      ; EVAL (DIVIDE (MINUS (NUM (-31), MINUS (MAX [MULT (NUM (11), NUM (-14)); MULT (NUM (-2), NUM (39)); MAX [NUM (32); NUM (-28); NUM (2); NUM (-16)]; PLUS (NUM (-10), NUM (9))], MULT (MULT (NUM (-42), NUM (33)), DIVIDE (NUM (-38), NUM (-43))))), NUM (-16)), "DIVIDE (MINUS (NUM (-31), MINUS (MAX [MULT (NUM (11), NUM (-14)); MULT (NUM (-2), NUM (39)); MAX [NUM (32); NUM (-28); NUM (2); NUM (-16)]; PLUS (NUM (-10), NUM (9))], MULT (MULT (NUM (-42), NUM (33)), DIVIDE (NUM (-38), NUM (-43))))), NUM (-16))", 3)
      ; EVAL (MULT (NUM (40), PLUS (DIVIDE (MAX [], MINUS (MULT (NUM (34), NUM (-18)), DIVIDE (NUM (-40), NUM (-8)))), MULT (PLUS (MULT (NUM (39), NUM (6)), NUM (15)), DIVIDE (NUM (-29), MINUS (NUM (-33), NUM (-1)))))), "MULT (NUM (40), PLUS (DIVIDE (MAX [], MINUS (MULT (NUM (34), NUM (-18)), DIVIDE (NUM (-40), NUM (-8)))), MULT (PLUS (MULT (NUM (39), NUM (6)), NUM (15)), DIVIDE (NUM (-29), MINUS (NUM (-33), NUM (-1))))))", 0)
      ; EVAL (PLUS (MINUS (MAX [], PLUS (MINUS (MULT (NUM (-46), NUM (-42)), NUM (-29)), MINUS (MULT (NUM (-18), NUM (6)), DIVIDE (NUM (-22), NUM (41))))), MAX [DIVIDE (MAX [MAX [NUM (-16); NUM (-43)]; NUM (10); MAX [NUM (20); NUM (-19)]; MAX [NUM (12); NUM (-38); NUM (-15)]], NUM (-18))]), "PLUS (MINUS (MAX [], PLUS (MINUS (MULT (NUM (-46), NUM (-42)), NUM (-29)), MINUS (MULT (NUM (-18), NUM (6)), DIVIDE (NUM (-22), NUM (41))))), MAX [DIVIDE (MAX [MAX [NUM (-16); NUM (-43)]; NUM (10); MAX [NUM (20); NUM (-19)]; MAX [NUM (12); NUM (-38); NUM (-15)]], NUM (-18))])", -1854)
      ; EVAL (MULT (PLUS (MINUS (MULT (MAX [NUM (41); NUM (21)], DIVIDE (NUM (15), NUM (-37))), PLUS (DIVIDE (NUM (31), NUM (-23)), MINUS (NUM (-49), NUM (-4)))), MINUS (MAX [DIVIDE (NUM (-50), NUM (18)); MAX [NUM (-32); NUM (33); NUM (-39)]; NUM (3); MINUS (NUM (-14), NUM (35))], MULT (DIVIDE (NUM (48), NUM (23)), MINUS (NUM (18), NUM (-17))))), NUM (-16)), "MULT (PLUS (MINUS (MULT (MAX [NUM (41); NUM (21)], DIVIDE (NUM (15), NUM (-37))), PLUS (DIVIDE (NUM (31), NUM (-23)), MINUS (NUM (-49), NUM (-4)))), MINUS (MAX [DIVIDE (NUM (-50), NUM (18)); MAX [NUM (-32); NUM (33); NUM (-39)]; NUM (3); MINUS (NUM (-14), NUM (35))], MULT (DIVIDE (NUM (48), NUM (23)), MINUS (NUM (18), NUM (-17))))), NUM (-16))", -144)
      ; EVAL (MINUS (MULT (DIVIDE (NUM (-4), DIVIDE (MAX [NUM (22)], MINUS (NUM (-28), NUM (-42)))), MAX [PLUS (NUM (-44), NUM (-6)); DIVIDE (MINUS (NUM (-43), NUM (-1)), NUM (-49))]), NUM (22)), "MINUS (MULT (DIVIDE (NUM (-4), DIVIDE (MAX [NUM (22)], MINUS (NUM (-28), NUM (-42)))), MAX [PLUS (NUM (-44), NUM (-6)); DIVIDE (MINUS (NUM (-43), NUM (-1)), NUM (-49))]), NUM (22))", -22)
      ; EVAL (NUM (-44), "NUM (-44)", -44)
      ; EVAL (PLUS (MINUS (DIVIDE (MULT (MULT (NUM (-2), NUM (-1)), PLUS (NUM (37), NUM (27))), NUM (-30)), DIVIDE (PLUS (MINUS (NUM (13), NUM (34)), DIVIDE (NUM (-42), NUM (-36))), PLUS (NUM (22), DIVIDE (NUM (35), NUM (15))))), DIVIDE (PLUS (MULT (MULT (NUM (2), NUM (-48)), PLUS (NUM (-9), NUM (-12))), NUM (18)), MULT (PLUS (DIVIDE (NUM (-13), NUM (25)), PLUS (NUM (-22), NUM (43))), PLUS (MINUS (NUM (1), NUM (34)), MINUS (NUM (12), NUM (-46)))))), "PLUS (MINUS (DIVIDE (MULT (MULT (NUM (-2), NUM (-1)), PLUS (NUM (37), NUM (27))), NUM (-30)), DIVIDE (PLUS (MINUS (NUM (13), NUM (34)), DIVIDE (NUM (-42), NUM (-36))), PLUS (NUM (22), DIVIDE (NUM (35), NUM (15))))), DIVIDE (PLUS (MULT (MULT (NUM (2), NUM (-48)), PLUS (NUM (-9), NUM (-12))), NUM (18)), MULT (PLUS (DIVIDE (NUM (-13), NUM (25)), PLUS (NUM (-22), NUM (43))), PLUS (MINUS (NUM (1), NUM (34)), MINUS (NUM (12), NUM (-46))))))", -1)
      ; EVAL (DIVIDE (DIVIDE (PLUS (PLUS (MAX [NUM (-46); NUM (22); NUM (23); NUM (21)], MINUS (NUM (-8), NUM (-19))), MINUS (MAX [], PLUS (NUM (-8), NUM (11)))), PLUS (MULT (NUM (46), DIVIDE (NUM (47), NUM (-40))), MINUS (MAX [NUM (3); NUM (26); NUM (-8); NUM (-20)], NUM (19)))), PLUS (MULT (MULT (NUM (-9), DIVIDE (NUM (-43), NUM (4))), PLUS (MAX [NUM (17); NUM (-11); NUM (-37)], MULT (NUM (20), NUM (-6)))), NUM (-24))), "DIVIDE (DIVIDE (PLUS (PLUS (MAX [NUM (-46); NUM (22); NUM (23); NUM (21)], MINUS (NUM (-8), NUM (-19))), MINUS (MAX [], PLUS (NUM (-8), NUM (11)))), PLUS (MULT (NUM (46), DIVIDE (NUM (47), NUM (-40))), MINUS (MAX [NUM (3); NUM (26); NUM (-8); NUM (-20)], NUM (19)))), PLUS (MULT (MULT (NUM (-9), DIVIDE (NUM (-43), NUM (4))), PLUS (MAX [NUM (17); NUM (-11); NUM (-37)], MULT (NUM (20), NUM (-6)))), NUM (-24)))", 0)
      ; EVAL (MINUS (MAX [], MULT (DIVIDE (PLUS (PLUS (NUM (18), NUM (3)), DIVIDE (NUM (-19), NUM (-22))), MAX [PLUS (NUM (-24), NUM (-9))]), DIVIDE (MINUS (NUM (-42), DIVIDE (NUM (-40), NUM (12))), MAX [MULT (NUM (-45), NUM (22))]))), "MINUS (MAX [], MULT (DIVIDE (PLUS (PLUS (NUM (18), NUM (3)), DIVIDE (NUM (-19), NUM (-22))), MAX [PLUS (NUM (-24), NUM (-9))]), DIVIDE (MINUS (NUM (-42), DIVIDE (NUM (-40), NUM (12))), MAX [MULT (NUM (-45), NUM (22))])))", 0)
      ]

    let runner tc = 
      match tc with
      | EVAL (e, es, answer) -> eval e = answer

    let string_of_tc tc =
      match tc with
      | EVAL (e, es, answer) ->
        ( Printf.sprintf "eval (%s)" es
        , string_of_int answer
        , string_of_int (eval e)
        )
  end

open TestEx7
let _ = wrapper testcases runner string_of_tc
